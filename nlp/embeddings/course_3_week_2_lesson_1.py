# -*- coding: utf-8 -*-
"""Course 3 - Week 2 - Lesson 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/lmoroney/dlaicourse/blob/master/TensorFlow%20In%20Practice/Course%203%20-%20NLP/Course%203%20-%20Week%202%20-%20Lesson%201.ipynb
"""

#@title Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""<a href="https://colab.research.google.com/github/lmoroney/dlaicourse/blob/master/TensorFlow%20In%20Practice/Course%203%20-%20NLP/Course%203%20-%20Week%202%20-%20Lesson%201.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>"""

import tensorflow as tf
print(tf.__version__)

# !pip install -q tensorflow-datasets

import tensorflow_datasets as tfds

### LOAD DATA FROM TFDS
imdb, info = tfds.load("imdb_reviews", with_info=True, as_supervised=True)

import numpy as np

### SPLITING DATA TRAIN AND TEST
train_data, test_data = imdb['train'], imdb['test']


#### CREATING THE LISTS THAT WILL HOLD THE ENTRIES
training_sentences = []
training_labels = []

testing_sentences = []
testing_labels = []



# str(s.tonumpy()) is needed in Python3 instead of just s.numpy()
for s,l in train_data:
  
  training_sentences.append(s.numpy().decode('utf8'))
  training_labels.append(l.numpy())
  
for s,l in test_data:
  testing_sentences.append(s.numpy().decode('utf8'))
  testing_labels.append(l.numpy())
  
training_labels_final = np.array(training_labels)
testing_labels_final = np.array(testing_labels)

#### HYPERPARAMETERS 
vocab_size = 10000
embedding_dim = 16
max_length = 120
trunc_type='post'
oov_tok = "<OOV>"


from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

#### THE Tokenizer configures the function tokeninzer settings like how many of the most recurrent words will it keep
tokenizer = Tokenizer(num_words = vocab_size, oov_token=oov_tok)

###### This indeed attributes for every word within the max num of accepted words a token number
tokenizer.fit_on_texts(training_sentences)

### This displays the whole set of key value word-numtoken pairs
word_index = tokenizer.word_index

## This only take the sentences and output them as a collection of tokens, instead of words
sequences = tokenizer.texts_to_sequences(training_sentences)

##### Normalize the sentences for proper processing
padded = pad_sequences(sequences,maxlen=max_length, truncating=trunc_type)

#### Same process, but for the test examples, these do not define the expected word-numtoken set, they are merely dependent on it
testing_sequences = tokenizer.texts_to_sequences(testing_sentences)
testing_padded = pad_sequences(testing_sequences,maxlen=max_length)
print(padded[0])

### Small helper to get a dict and invert the key-value to a value-key representation based on the available word-numtoken pairs
reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])

### this get the prior logic and pass a sequence NOT A TEXT, into it an just then outputs a text
def decode_review(text):
    return ' '.join([reverse_word_index.get(i, '?') for i in text])

print(decode_review(padded[3]))
print(training_sentences[3])

####### REGULAR KERAS MODEL SETTING, Embeddings are particular to word embeddings
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(6, activation='relu'),
    ##### THIS is a single node sigmoid due its binary classification capacity, It is to categorize data into the 2 labels that they are defined
    tf.keras.layers.Dense(1, activation='sigmoid')
])
#### basic keras bs
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
model.summary()

num_epochs = 10
model.fit(padded, training_labels_final, epochs=num_epochs, validation_data=(testing_padded, testing_labels_final))

### APARENTELY the embeddings hold the meaningful rperesentations learned by the model,
##### SO THE layers 0 from the model is exactly the embedding which we will use the 16 weights of each item to determine its class
e = model.layers[0]
weights = e.get_weights()[0]
print(weights.shape) # shape: (vocab_size, embedding_dim)

import io
#################### Here we will generate the tab separated representation
out_v = io.open('vecs.tsv', 'w', encoding='utf-8')
out_m = io.open('meta.tsv', 'w', encoding='utf-8')
###FOR EVERY WORD in THE AVAILABLE VOCABULAR SIZE TAKE ITS TOKEN NUM
for word_num in range(1, vocab_size):
  #### THIS WILL GO TO METADATA ABOUT THE VECTORS, PASSING THE REVERSE WORD INDEX THE WORD WILL BE OUT PUT WHEN WILL MAP THE DICT TO TOKENNUM
  word = reverse_word_index[word_num]
  ############## THIS ARE THE VERY REPRESENTATION OF EVERY ONE OF THESE WORDS THAT WE PROCESSED IN THE MODEL  a 10000 entry rows, 16 colunm tabular sheet#
  embeddings = weights[word_num]
  ### WRITE A LINE WITH WORD DUE TO \n line break
  out_m.write(word + "\n")
  #### write an entry with its 16 values casted to strings
  out_v.write('\t'.join([str(x) for x in embeddings]) + "\n")
out_v.close()
out_m.close()

# try:
#   from google.colab import files
# except ImportError:
#   pass
# else:

#   #### ONLY START THE DOWNLOAD FOR THE LOCAL MACHINE
#   files.download('vecs.tsv')
#   files.download('meta.tsv')

sentence = "I really think this is amazing. honest."
sequence = tokenizer.texts_to_sequences([sentence])
print(sequence)